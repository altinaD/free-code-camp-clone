(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-72e08bcd"],{"1e71":function(e,t,c){"use strict";c.r(t);var s=c("7a23"),l=c("d512"),a=c("db86"),b=c("85eb"),j=c("ae20"),n=c("7801"),O=c("567f"),u=c("8174");const i={class:"test-case"},g={class:"screen-divide"},r=Object(s["g"])("h1",null,"Extract Matches",-1),d=Object(s["i"])(" So far, you have only been checking if a pattern exists or not within a string. You can also extract the actual matches you found with the "),o=Object(s["i"])(".match()"),p=Object(s["i"])(" method. "),h=Object(s["i"])(" To use the "),f=Object(s["i"])(".match()"),v=Object(s["i"])(" method, apply the method on a string and pass in the regex inside the parentheses. "),x=Object(s["g"])("p",null,"Here's an example:",-1),k=Object(s["g"])("span",{class:"green"},'"Hello, World!"',-1),_=Object(s["g"])("span",{class:"black"},".",-1),m=Object(s["g"])("span",{class:"red"},"match",-1),w=Object(s["g"])("span",{class:"black"},"(",-1),L=Object(s["g"])("span",{class:"brown"},"/Hello/",-1),y=Object(s["g"])("span",{class:"black"},");",-1),R=Object(s["g"])("div",{class:"next"},null,-1),H=Object(s["g"])("span",{class:"blue"},"let ",-1),S=Object(s["g"])("span",{class:"black"},"ourStr = ",-1),W=Object(s["g"])("span",{class:"green"},'"Regular expressions"',-1),Y=Object(s["g"])("span",{class:"black"},";",-1),A=Object(s["g"])("div",{class:"next"},null,-1),J=Object(s["g"])("span",{class:"blue"},"let ",-1),T=Object(s["g"])("span",{class:"black"},"ourRegex = ",-1),z=Object(s["g"])("span",{class:"brown"},"/expressions/",-1),C=Object(s["g"])("span",{class:"black"},";",-1),E=Object(s["g"])("div",{class:"next"},null,-1),I=Object(s["g"])("span",{class:"black"},"ourStr.",-1),M=Object(s["g"])("span",{class:"red"},"match",-1),N=Object(s["g"])("span",{class:"black"},"(ourRegex);",-1),$=Object(s["i"])(" Here the first "),q=Object(s["i"])("match"),B=Object(s["i"])(" would return "),D=Object(s["i"])('["Hello"]'),F=Object(s["i"])(" and the second would return "),G=Object(s["i"])('["expressions"]'),K=Object(s["i"])(". "),P=Object(s["i"])(" Note that the "),Q=Object(s["i"])(".match"),U=Object(s["i"])(' syntax is the "opposite" of the '),V=Object(s["i"])(".test"),X=Object(s["i"])(" method you have been using thus far: "),Z=Object(s["g"])("span",{class:"green"},"'string'",-1),ee=Object(s["g"])("span",{class:"black"},".",-1),te=Object(s["g"])("span",{class:"red"},"match",-1),ce=Object(s["g"])("span",{class:"black"},"(",-1),se=Object(s["g"])("span",{class:"brown"},"/regex/",-1),le=Object(s["g"])("span",{class:"black"},");",-1),ae=Object(s["g"])("div",{class:"next"},null,-1),be=Object(s["g"])("span",{class:"brown"},"/regex/",-1),je=Object(s["g"])("span",{class:"black"},".",-1),ne=Object(s["g"])("span",{class:"red"},"test",-1),Oe=Object(s["g"])("span",{class:"black"},"(",-1),ue=Object(s["g"])("span",{class:"green"},"'string'",-1),ie=Object(s["g"])("span",{class:"black"},");",-1),ge=Object(s["g"])("hr",null,null,-1),re=Object(s["i"])(" Apply the "),de=Object(s["i"])(".match()"),oe=Object(s["i"])(" method to extract the string "),pe=Object(s["i"])("coding"),he=Object(s["i"])(". "),fe=Object(s["g"])("hr",null,null,-1),ve={class:"tests"},xe={class:"test"},ke=Object(s["i"])(" The "),_e=Object(s["i"])("result"),me=Object(s["i"])(" should have the string "),we=Object(s["i"])("coding"),Le={class:"test"},ye=Object(s["i"])(" Your regex "),Re=Object(s["i"])("codingRegex"),He=Object(s["i"])(" should search for the string "),Se=Object(s["i"])("coding"),We={class:"test"},Ye=Object(s["i"])("You should use the "),Ae=Object(s["i"])(".match()"),Je=Object(s["i"])(" method.");var Te={setup(e){const t=Object(s["A"])();function c(e){let c=window.innerWidth-e-30;t.value.style.width=c+"px"}return(e,Te)=>(Object(s["v"])(),Object(s["f"])("div",i,[Object(s["j"])(a["a"]),Object(s["g"])("div",g,[Object(s["g"])("div",{class:"left-screen",ref_key:"leftScreenRef",ref:t},[Object(s["j"])(b["a"],null,{default:Object(s["L"])(()=>[r,Object(s["g"])("p",null,[d,Object(s["j"])(j["a"],null,{default:Object(s["L"])(()=>[o]),_:1}),p]),Object(s["g"])("p",null,[h,Object(s["j"])(j["a"],null,{default:Object(s["L"])(()=>[f]),_:1}),v]),x,Object(s["j"])(l["a"],null,{default:Object(s["L"])(()=>[k,_,m,w,L,y,R,H,S,W,Y,A,J,T,z,C,E,I,M,N]),_:1}),Object(s["g"])("p",null,[$,Object(s["j"])(j["a"],null,{default:Object(s["L"])(()=>[q]),_:1}),B,Object(s["j"])(j["a"],null,{default:Object(s["L"])(()=>[D]),_:1}),F,Object(s["j"])(j["a"],null,{default:Object(s["L"])(()=>[G]),_:1}),K]),Object(s["g"])("p",null,[P,Object(s["j"])(j["a"],null,{default:Object(s["L"])(()=>[Q]),_:1}),U,Object(s["j"])(j["a"],null,{default:Object(s["L"])(()=>[V]),_:1}),X]),Object(s["j"])(l["a"],null,{default:Object(s["L"])(()=>[Z,ee,te,ce,se,le,ae,be,je,ne,Oe,ue,ie]),_:1}),ge,Object(s["g"])("p",null,[re,Object(s["j"])(j["a"],null,{default:Object(s["L"])(()=>[de]),_:1}),oe,Object(s["j"])(j["a"],null,{default:Object(s["L"])(()=>[pe]),_:1}),he]),fe,Object(s["j"])(O["a"]),Object(s["g"])("ul",ve,[Object(s["g"])("li",xe,[Object(s["j"])(u["a"]),Object(s["g"])("p",null,[ke,Object(s["j"])(j["a"],null,{default:Object(s["L"])(()=>[_e]),_:1}),me,Object(s["j"])(j["a"],null,{default:Object(s["L"])(()=>[we]),_:1})])]),Object(s["g"])("li",Le,[Object(s["j"])(u["a"]),Object(s["g"])("p",null,[ye,Object(s["j"])(j["a"],null,{default:Object(s["L"])(()=>[Re]),_:1}),He,Object(s["j"])(j["a"],null,{default:Object(s["L"])(()=>[Se]),_:1})])]),Object(s["g"])("li",We,[Object(s["j"])(u["a"]),Object(s["g"])("p",null,[Ye,Object(s["j"])(j["a"],null,{default:Object(s["L"])(()=>[Ae]),_:1}),Je])])])]),_:1})],512),Object(s["j"])(n["a"],{onResizeWidth:c})])]))}};const ze=Te;t["default"]=ze},"4f87":function(e,t,c){},d512:function(e,t,c){"use strict";var s=c("7a23");const l={class:"comment"};function a(e,t){return Object(s["v"])(),Object(s["f"])("div",l,[Object(s["g"])("span",null,[Object(s["C"])(e.$slots,"default",{},void 0,!0)])])}c("dbcc");var b=c("6b0d"),j=c.n(b);const n={},O=j()(n,[["render",a],["__scopeId","data-v-358fd9c6"]]);t["a"]=O},dbcc:function(e,t,c){"use strict";c("4f87")}}]);
//# sourceMappingURL=chunk-72e08bcd.344ec9c8.js.map