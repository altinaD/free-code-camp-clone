{"version":3,"sources":["webpack:///./src/components/util-components/comment.vue","webpack:///./src/components/util-components/comment.vue?47ad","webpack:///./src/views/es6/destructuring-via-rest-elements.vue","webpack:///./src/views/es6/destructuring-via-rest-elements.vue?6651","webpack:///./src/components/util-components/comment.vue?ebee"],"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_renderSlot","_ctx","$slots","undefined","script","__exports__","render","leftScreenRef","ref","changeWidth","n","size","window","innerWidth","value","style","width"],"mappings":"kKACOA,MAAM,W,wCAAXC,eAEM,MAFNC,EAEM,CADJC,eAA2B,aAApBC,eAAaC,EAAAC,OAAA,kBAAAC,GAAA,O,mCCDxB,MAAMC,EAAS,GAKTC,EAA2B,IAAgBD,EAAQ,CAAC,CAAC,SAASE,GAAQ,CAAC,YAAY,qBAE1E,U,wxGC+Ff,MAAMC,EAAgBC,iBAEtB,SAASC,EAAYC,GACnB,IAAIC,EAAOC,OAAOC,WAAaH,EAAI,GACnCH,EAAcO,MAAMC,MAAMC,MAAQL,EAAO,K,iyDCxG3C,MAAMN,GAAc,GAEL,iB,kCCLf","file":"js/chunk-3bb1c859.30f4eda8.js","sourcesContent":["<template>\r\n  <div class=\"comment\">\r\n    <span> <slot></slot></span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.comment {\r\n  background-color: #f5f2f0;\r\n  padding: 1rem;\r\n  width: 100%;\r\n  margin: 15px 0;\r\n  font-size: 1.12rem;\r\n}\r\n</style>\r\n","import { render } from \"./comment.vue?vue&type=template&id=358fd9c6&scoped=true\"\nconst script = {}\n\nimport \"./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\"\n\nimport exportComponent from \"E:\\\\Altyn\\\\portfolio\\\\vue3\\\\free-code-camp-clone\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-358fd9c6\"]])\n\nexport default __exports__","<template>\r\n  <div class=\"test-case\">\r\n    <Navigation />\r\n    <div class=\"screen-divide\">\r\n      <div class=\"left-screen\" ref=\"leftScreenRef\">\r\n        <LeftScreen>\r\n          <h1>Destructuring via rest elements</h1>\r\n          <p>\r\n            In some situations involving array destructuring, we might want to\r\n            collect the rest of the elements into a separate array.\r\n          </p>\r\n          <p>\r\n            The result is similar to <Code>Array.prototype.slice()</Code>, as\r\n            shown below:\r\n          </p>\r\n          <Comment>\r\n            <span class=\"blue\">const </span>\r\n            <span class=\"black\">[ a, b, ... arr ] = [ </span>\r\n            <span class=\"purple\">1</span>\r\n            <span class=\"black\">, </span>\r\n            <span class=\"purple\">2</span>\r\n            <span class=\"black\">, </span>\r\n            <span class=\"purple\">3</span>\r\n            <span class=\"black\">, </span>\r\n            <span class=\"purple\">4</span>\r\n            <span class=\"black\">, </span>\r\n            <span class=\"purple\">5</span>\r\n            <span class=\"black\">, </span>\r\n            <span class=\"purple\">6</span>\r\n            <span class=\"black\">, </span>\r\n            <span class=\"purple\">7</span>\r\n            <span class=\"black\"> ]; </span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">console.</span>\r\n            <span class=\"red\">log</span>\r\n            <span class=\"black\">( a, b );</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">console.</span>\r\n            <span class=\"red\">log</span>\r\n            <span class=\"black\">( arr );</span>\r\n          </Comment>\r\n          <p>\r\n            The console would display the values <Code>1, 2</Code> and\r\n            <Code>[3, 4, 5, 7]</Code>.\r\n          </p>\r\n          <p>\r\n            Variables <Code>a</Code> and <Code>b</Code> take the first and\r\n            second values from the array. After that, because of the rest syntax\r\n            presence, <Code>arr</Code> gets the rest of the values in the form\r\n            of an array. The rest element only works correctly as the last\r\n            variable in the list. As in, you cannot use the rest syntax to catch\r\n            a subarray that leaves out the last element of the original array.\r\n          </p>\r\n          <hr />\r\n          <p>\r\n            Use a destructuring assignment with the rest syntax to emulate the\r\n            behavior of <Code>Array.prototype.slice()</Code>.\r\n            <Code>removeFirstTwo()</Code> should return a sub-array of the\r\n            original array <Code>list</Code> with the first two elements\r\n            omitted.\r\n          </p>\r\n          <hr />\r\n          <tests />\r\n          <ul class=\"tests\">\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>removeFirstTwo([1, 2, 3, 4, 5])</Code> should be\r\n                <Code>[3, 4, 5]</Code>\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>removeFirstTwo()</Code> should not modify\r\n                <Code>list</Code>\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p><Code>Array.slice()</Code> should not be used.</p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>You should use the rest syntax.</p>\r\n            </li>\r\n          </ul>\r\n        </LeftScreen>\r\n      </div>\r\n      <RightScreen @resize-width=\"changeWidth\"> </RightScreen>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport Comment from \"@/components/util-components/comment.vue\";\r\nimport Navigation from \"@/components/util-components/navigation.vue\";\r\nimport LeftScreen from \"@/components/util-components/left-screen.vue\";\r\nimport Code from \"@/components/util-components/code.vue\";\r\nimport RightScreen from \"@/components/util-components/right-screen.vue\";\r\nimport Tests from \"@/components/util-components/tests.vue\";\r\nimport testsInitial from \"@/components/util-components/svg-components/tests-initial.vue\";\r\nimport { ref } from \"vue\";\r\nconst leftScreenRef = ref();\r\n\r\nfunction changeWidth(n) {\r\n  let size = window.innerWidth - n - 30;\r\n  leftScreenRef.value.style.width = size + \"px\";\r\n}\r\n</script>\r\n","import script from \"./destructuring-via-rest-elements.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./destructuring-via-rest-elements.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\""],"sourceRoot":""}