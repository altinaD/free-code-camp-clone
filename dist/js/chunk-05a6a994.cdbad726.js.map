{"version":3,"sources":["webpack:///./src/views/es6/use-arrow-functions-to-write-concise-anonymous-functions.vue","webpack:///./src/views/es6/use-arrow-functions-to-write-concise-anonymous-functions.vue?ea1e","webpack:///./src/components/util-components/comment.vue","webpack:///./src/components/util-components/comment.vue?47ad","webpack:///./src/components/util-components/comment.vue?ebee"],"names":["leftScreenRef","ref","changeWidth","n","size","window","innerWidth","value","style","width","__exports__","class","_createElementBlock","_hoisted_1","_createElementVNode","_renderSlot","_ctx","$slots","undefined","script","render"],"mappings":"mtIA8HA,MAAMA,EAAgBC,iBAEtB,SAASC,EAAYC,GACnB,IAAIC,EAAOC,OAAOC,WAAaH,EAAI,GACnCH,EAAcO,MAAMC,MAAMC,MAAQL,EAAO,K,i5DC/H3C,MAAMM,GAAc,GAEL,iB,2DCJRC,MAAM,W,wCAAXC,eAEM,MAFNC,EAEM,CADJC,eAA2B,aAApBC,eAAaC,EAAAC,OAAA,kBAAAC,GAAA,O,mCCDxB,MAAMC,EAAS,GAKTT,EAA2B,IAAgBS,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAE1E,U,kCCRf","file":"js/chunk-05a6a994.cdbad726.js","sourcesContent":["<template>\r\n  <div class=\"test-case\">\r\n    <Navigation />\r\n    <div class=\"screen-divide\">\r\n      <div class=\"left-screen\" ref=\"leftScreenRef\">\r\n        <LeftScreen>\r\n          <h1>Use Arrow Functions to Write Concise Anonymous Functions</h1>\r\n          <p>\r\n            In JavaScript, we often don't need to name our functions, especially\r\n            when passing a function as an argument to another function. Instead,\r\n            we create inline functions. We don't need to name these functions\r\n            because we do not reuse them anywhere else.\r\n          </p>\r\n          <p>To achieve this, we often use the following syntax:</p>\r\n          <Comment>\r\n            <span class=\"blue\">const </span>\r\n            <span class=\"red\">myFunc </span>\r\n            <span class=\"black\">= </span>\r\n            <span class=\"blue\">function</span>\r\n            <span class=\"black\">() {</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span>\r\n            <span class=\"blue\">const </span>\r\n            <span class=\"black\">myVar = </span>\r\n            <span class=\"green\">\"value\"</span>\r\n            <span class=\"black\">;</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span>\r\n            <span class=\"blue\">return </span>\r\n            <span class=\"black\">myVar;</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">}</span>\r\n          </Comment>\r\n          <p>\r\n            ES6 provides us with the syntactic sugar to not have to write\r\n            anonymous functions this way. Instead, you can use\r\n            <b>arrow function syntax:</b>\r\n          </p>\r\n          <Comment>\r\n            <span class=\"blue\">const </span>\r\n            <span class=\"red\">myFunc </span>\r\n            <span class=\"black\">= () => {</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span>\r\n            <span class=\"blue\">const </span>\r\n            <span class=\"black\">myVar = </span>\r\n            <span class=\"green\">\"value\"</span>\r\n            <span class=\"black\">;</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span>\r\n            <span class=\"blue\">return </span>\r\n            <span class=\"black\">myVar;</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">}</span>\r\n          </Comment>\r\n          <p>\r\n            When there is no function body, and only a return value, arrow\r\n            function syntax allows you to omit the keyword\r\n            <Code>return</Code> as well as the brackets surrounding the code.\r\n            This helps simplify smaller functions into one-line statements:\r\n          </p>\r\n          <Comment>\r\n            <span class=\"blue\">const </span>\r\n            <span class=\"red\">myFunc</span>\r\n            <span class=\"black\">= () => </span>\r\n            <span class=\"green\">\"value\"</span>\r\n            <span class=\"black\">;</span>\r\n          </Comment>\r\n          <p>\r\n            This code will still return the string <Code>value</Code> by\r\n            default.\r\n          </p>\r\n          <hr />\r\n          <p>\r\n            Rewrite the function assigned to the variable\r\n            <Code>magic</Code> which returns a <Code>new Date()</Code> to use\r\n            arrow function syntax. Also, make sure nothing is defined using the\r\n            keyword <Code>var</Code>.\r\n          </p>\r\n          <hr />\r\n          <tests />\r\n          <ul class=\"tests\">\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>You should replace the <Code>var</Code> keyword.</p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>magic</Code> should be a constant variable (by using\r\n                <Code>const</Code>).\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>magic</Code> should be a\r\n                <Code>function</Code>\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p><Code>magic</Code> should return the correct date.</p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>The <Code>function</Code> keyword should not be used;</p>\r\n            </li>\r\n          </ul>\r\n        </LeftScreen>\r\n      </div>\r\n      <RightScreen @resize-width=\"changeWidth\"> </RightScreen>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport Comment from \"@/components/util-components/comment.vue\";\r\nimport Navigation from \"@/components/util-components/navigation.vue\";\r\nimport LeftScreen from \"@/components/util-components/left-screen.vue\";\r\nimport Code from \"@/components/util-components/code.vue\";\r\nimport RightScreen from \"@/components/util-components/right-screen.vue\";\r\nimport Tests from \"@/components/util-components/tests.vue\";\r\nimport testsInitial from \"@/components/util-components/svg-components/tests-initial.vue\";\r\nimport { ref } from \"vue\";\r\n\r\nconst leftScreenRef = ref();\r\n\r\nfunction changeWidth(n) {\r\n  let size = window.innerWidth - n - 30;\r\n  leftScreenRef.value.style.width = size + \"px\";\r\n}\r\n</script>\r\n","import script from \"./use-arrow-functions-to-write-concise-anonymous-functions.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./use-arrow-functions-to-write-concise-anonymous-functions.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  <div class=\"comment\">\r\n    <span> <slot></slot></span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.comment {\r\n  background-color: #f5f2f0;\r\n  padding: 1rem;\r\n  width: 100%;\r\n  margin: 15px 0;\r\n  font-size: 1.12rem;\r\n}\r\n</style>\r\n","import { render } from \"./comment.vue?vue&type=template&id=358fd9c6&scoped=true\"\nconst script = {}\n\nimport \"./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\"\n\nimport exportComponent from \"E:\\\\Altyn\\\\portfolio\\\\vue3\\\\free-code-camp-clone\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-358fd9c6\"]])\n\nexport default __exports__","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\""],"sourceRoot":""}