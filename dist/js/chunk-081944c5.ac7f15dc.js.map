{"version":3,"sources":["webpack:///./src/views/es6/use-the-rest-parameter-with-function-parameters.vue","webpack:///./src/views/es6/use-the-rest-parameter-with-function-parameters.vue?47df","webpack:///./src/components/util-components/comment.vue","webpack:///./src/components/util-components/comment.vue?47ad","webpack:///./src/components/util-components/comment.vue?ebee"],"names":["leftScreenRef","ref","changeWidth","n","size","window","innerWidth","value","style","width","__exports__","class","_createElementBlock","_hoisted_1","_createElementVNode","_renderSlot","_ctx","$slots","undefined","script","render"],"mappings":"61IAqHA,MAAMA,EAAgBC,iBAEtB,SAASC,EAAYC,GACnB,IAAIC,EAAOC,OAAOC,WAAaH,EAAI,GACnCH,EAAcO,MAAMC,MAAMC,MAAQL,EAAO,K,s2DCtH3C,MAAMM,GAAc,GAEL,iB,2DCJRC,MAAM,W,wCAAXC,eAEM,MAFNC,EAEM,CADJC,eAA2B,aAApBC,eAAaC,EAAAC,OAAA,kBAAAC,GAAA,O,mCCDxB,MAAMC,EAAS,GAKTT,EAA2B,IAAgBS,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAE1E,U,kCCRf","file":"js/chunk-081944c5.ac7f15dc.js","sourcesContent":["<template>\r\n  <div class=\"test-case\">\r\n    <Navigation />\r\n    <div class=\"screen-divide\">\r\n      <div class=\"left-screen\" ref=\"leftScreenRef\">\r\n        <LeftScreen>\r\n          <h1>Use the Rest Parameter with Function Parameters</h1>\r\n          <p>\r\n            In order to help us create more flexible functions, ES6 introduces\r\n            the <i>rest parameter</i> for function parameters. With the rest\r\n            parameter, you can create functions that take a variable number of\r\n            arguments. These arguments are stored in an array that can be\r\n            accessed later from inside the function.\r\n          </p>\r\n          <p>Check out this code:</p>\r\n          <Comment>\r\n            <span class=\"blue\">function </span>\r\n            <span class=\"red\">howMany</span>\r\n            <span class=\"black\">(...args) {</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span>\r\n            <span class=\"blue\">return </span>\r\n            <span class=\"green\">\"You have passed \" </span>\r\n            <span class=\"black\">+ args.length + </span>\r\n            <span class=\"green\">\" arguments.\" </span>\r\n            <span class=\"black\">;</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">}</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">console.</span>\r\n            <span class=\"red\">log</span>\r\n            <span class=\"black\">(</span>\r\n            <span class=\"red\">howMany</span>\r\n            <span class=\"black\">(</span>\r\n            <span class=\"purple\">0</span>\r\n            <span class=\"black\">, </span>\r\n            <span class=\"purple\">1</span>\r\n            <span class=\"black\">, </span>\r\n            <span class=\"purple\">2</span>\r\n            <span class=\"black\">));</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">console.</span>\r\n            <span class=\"red\">log</span>\r\n            <span class=\"black\">(</span>\r\n            <span class=\"red\">howMany</span>\r\n            <span class=\"black\">(</span>\r\n            <span class=\"green\">\"string\"</span>\r\n            <span class=\"black\">, </span>\r\n            <span class=\"blue\">null</span>\r\n            <span class=\"black\">, [</span>\r\n            <span class=\"purple\">1</span>\r\n            <span class=\"black\">, </span>\r\n            <span class=\"purple\">2</span>\r\n            <span class=\"black\">, </span>\r\n            <span class=\"purple\">3</span>\r\n            <span class=\"black\">], { }));</span>\r\n          </Comment>\r\n          <p>\r\n            The console would display the strings\r\n            <Code>You have passed 3 arguments.</Code> and\r\n            <Code>You have passed 4 arguments.</Code>.\r\n          </p>\r\n          <p>\r\n            The rest parameter eliminates the need to use the\r\n            <Code>arguments</Code> object and allows us to use array methods on\r\n            the array of parameters passed to the function <Code>howMany</Code>.\r\n          </p>\r\n          <hr />\r\n          <p>\r\n            Modify the function <Code>sum</Code> using the rest parameter in\r\n            such a way that the function <Code>sum</Code> is able to take any\r\n            number of arguments and return their sum.\r\n          </p>\r\n          <hr />\r\n          <tests />\r\n          <ul class=\"tests\">\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>The result of <Code>sum(0,1,2)</Code> should be 3</p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>The result of <Code>sum(1,2,3,4)</Code> should be 10</p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>The result of <Code>sum(5)</Code> should be 5</p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>The result of <Code>sum()</Code> should be 0</p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>sum</Code> should be an arrow function which uses the rest\r\n                parameter syntax (<Code>...</Code>) on the\r\n                <Code>args</Code> parameter.\r\n              </p>\r\n            </li>\r\n          </ul>\r\n        </LeftScreen>\r\n      </div>\r\n      <RightScreen @resize-width=\"changeWidth\"> </RightScreen>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport Comment from \"@/components/util-components/comment.vue\";\r\nimport Navigation from \"@/components/util-components/navigation.vue\";\r\nimport LeftScreen from \"@/components/util-components/left-screen.vue\";\r\nimport Code from \"@/components/util-components/code.vue\";\r\nimport RightScreen from \"@/components/util-components/right-screen.vue\";\r\nimport Tests from \"@/components/util-components/tests.vue\";\r\nimport testsInitial from \"@/components/util-components/svg-components/tests-initial.vue\";\r\nimport { ref } from \"vue\";\r\nconst leftScreenRef = ref();\r\n\r\nfunction changeWidth(n) {\r\n  let size = window.innerWidth - n - 30;\r\n  leftScreenRef.value.style.width = size + \"px\";\r\n}\r\n</script>\r\n","import script from \"./use-the-rest-parameter-with-function-parameters.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./use-the-rest-parameter-with-function-parameters.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  <div class=\"comment\">\r\n    <span> <slot></slot></span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.comment {\r\n  background-color: #f5f2f0;\r\n  padding: 1rem;\r\n  width: 100%;\r\n  margin: 15px 0;\r\n  font-size: 1.12rem;\r\n}\r\n</style>\r\n","import { render } from \"./comment.vue?vue&type=template&id=358fd9c6&scoped=true\"\nconst script = {}\n\nimport \"./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\"\n\nimport exportComponent from \"E:\\\\Altyn\\\\portfolio\\\\vue3\\\\free-code-camp-clone\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-358fd9c6\"]])\n\nexport default __exports__","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\""],"sourceRoot":""}