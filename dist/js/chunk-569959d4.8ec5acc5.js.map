{"version":3,"sources":["webpack:///./src/views/basic-js/declare-a-read-only-variable-with-the-const-keyword.vue","webpack:///./src/views/basic-js/declare-a-read-only-variable-with-the-const-keyword.vue?6a7f","webpack:///./src/components/util-components/comment.vue","webpack:///./src/components/util-components/comment.vue?47ad","webpack:///./src/components/util-components/comment.vue?ebee"],"names":["leftScreenRef","ref","changeWidth","n","size","window","innerWidth","value","style","width","__exports__","class","_createElementBlock","_hoisted_1","_createElementVNode","_renderSlot","_ctx","$slots","undefined","script","render"],"mappings":"2sHA8GA,MAAMA,EAAgBC,iBAEtB,SAASC,EAAYC,GACnB,IAAIC,EAAOC,OAAOC,WAAaH,EAAI,GACnCH,EAAcO,MAAMC,MAAMC,MAAQL,EAAO,K,kmFC/G3C,MAAMM,GAAc,GAEL,iB,oFCJRC,MAAM,W,wCAAXC,eAEM,MAFNC,EAEM,CADJC,eAA2B,aAApBC,eAAaC,EAAAC,OAAA,kBAAAC,GAAA,O,mCCDxB,MAAMC,EAAS,GAKTT,EAA2B,IAAgBS,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAE1E,U,kCCRf","file":"js/chunk-569959d4.8ec5acc5.js","sourcesContent":["<template>\r\n  <div class=\"test-case\">\r\n    <Navigation />\r\n    <div class=\"screen-divide\">\r\n      <div class=\"left-screen\" ref=\"leftScreenRef\">\r\n        <LeftScreen>\r\n          <h1>Declare a Read-Only Variable with the const Keyword</h1>\r\n          <p>\r\n            The keyword <Code>let</Code> is not the only new way to declare\r\n            variables. In ES6, you can also declare variables using the\r\n            <Code>const</Code> keyword.\r\n          </p>\r\n          <p>\r\n            <Code>const</Code> has all the awesome features that\r\n            <Code>let</Code> has, with the added bonus that variables declared\r\n            using <Code>const</Code> are read-only. They are a constant value,\r\n            which means that once a variable is assigned with\r\n            <Code>const</Code>, it cannot be reassigned:\r\n          </p>\r\n          <Comment\r\n            ><span class=\"green\">const</span> <span class=\"red\">FAV_PET</span>\r\n            <span class=\"green\"> = \"Cats\";</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"red\">FAV_PET </span\r\n            ><span class=\"green\"> = \"Dogs\";</span></Comment\r\n          >\r\n          <p>\r\n            The console will display an error due to reassigning the value of\r\n            <Code>FAV_PET</Code>.\r\n          </p>\r\n          <p>\r\n            You should always name variables you don't want to reassign using\r\n            the <Code>const</Code> keyword. This helps when you accidentally\r\n            attempt to reassign a variable that is meant to stay constant.\r\n          </p>\r\n          <p>\r\n            <b>Note: </b>It is common for developers to use uppercase variable\r\n            identifiers for immutable values and lowercase or camelCase for\r\n            mutable values (objects and arrays). You will learn more about\r\n            objects, arrays, and immutable and mutable values in later\r\n            challenges. Also in later challenges, you will see examples of\r\n            uppercase, lowercase, or camelCase variable identifiers.\r\n          </p>\r\n          <hr />\r\n          <p>\r\n            Change the code so that all variables are declared using\r\n            <Code>let</Code> or <Code>const</Code>. Use <Code>let</Code> when\r\n            you want the variable to change, and <Code>const</Code> when you\r\n            want the variable to remain constant. Also, rename variables\r\n            declared with <Code>const</Code> to conform to common practices. Do\r\n            not change the strings assigned to the variables.\r\n          </p>\r\n          <hr />\r\n          <tests />\r\n          <ul class=\"tests\">\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p><Code>var</Code> should not exist in your code.</p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>You should change <Code>fCC</Code> to all uppercase.</p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>FCC</Code> should be a constant variable declared with\r\n                <Code>const</Code>.\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                Waiting:The string assigned to <Code>FCC</Code> should not be\r\n                changed.\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p><Code>fact</Code> should be declared with <Code>let</Code>.</p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>console.log</Code> should be changed to print the\r\n                <Code>FCC</Code> and <Code>fact</Code> variables.\r\n              </p>\r\n            </li>\r\n          </ul>\r\n        </LeftScreen>\r\n      </div>\r\n      <RightScreen @resize-width=\"changeWidth\">\r\n        <p>\r\n          Lorem ipsum dolor, sit amet consectetur adipisicing elit. Eos,\r\n          doloremque.\r\n        </p>\r\n      </RightScreen>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport Comment from \"@/components/util-components/comment.vue\";\r\nimport Navigation from \"@/components/util-components/navigation.vue\";\r\nimport LeftScreen from \"@/components/util-components/left-screen.vue\";\r\nimport Code from \"@/components/util-components/code.vue\";\r\nimport RightScreen from \"@/components/util-components/right-screen.vue\";\r\nimport Tests from \"@/components/util-components/tests.vue\";\r\nimport testsInitial from \"@/components/util-components/svg-components/tests-initial.vue\";\r\nimport { ref } from \"vue\";\r\nconst leftScreenRef = ref();\r\n\r\nfunction changeWidth(n) {\r\n  let size = window.innerWidth - n - 30;\r\n  leftScreenRef.value.style.width = size + \"px\";\r\n}\r\n</script>\r\n","import script from \"./declare-a-read-only-variable-with-the-const-keyword.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./declare-a-read-only-variable-with-the-const-keyword.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  <div class=\"comment\">\r\n    <span> <slot></slot></span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.comment {\r\n  background-color: #f5f2f0;\r\n  padding: 1rem;\r\n  width: 100%;\r\n  margin: 15px 0;\r\n  font-size: 1.12rem;\r\n}\r\n</style>\r\n","import { render } from \"./comment.vue?vue&type=template&id=358fd9c6&scoped=true\"\nconst script = {}\n\nimport \"./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\"\n\nimport exportComponent from \"E:\\\\Altyn\\\\portfolio\\\\vue3\\\\free-code-camp-clone\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-358fd9c6\"]])\n\nexport default __exports__","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\""],"sourceRoot":""}