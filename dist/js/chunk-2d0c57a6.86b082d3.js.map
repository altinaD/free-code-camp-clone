{"version":3,"sources":["webpack:///./src/views/func-prog/understand-functional-programming-terminology.vue","webpack:///./src/views/func-prog/understand-functional-programming-terminology.vue?46cc"],"names":["leftScreenRef","ref","changeWidth","n","size","window","innerWidth","value","style","width","__exports__"],"mappings":"4yGAuGA,MAAMA,EAAgBC,iBAEtB,SAASC,EAAYC,GACnB,IAAIC,EAAOC,OAAOC,WAAaH,EAAI,GACnCH,EAAcO,MAAMC,MAAMC,MAAQL,EAAO,K,qkDCxG3C,MAAMM,GAAc,GAEL","file":"js/chunk-2d0c57a6.86b082d3.js","sourcesContent":["<template>\r\n  <div class=\"test-case\">\r\n    <Navigation />\r\n    <div class=\"screen-divide\">\r\n      <div class=\"left-screen\" ref=\"leftScreenRef\">\r\n        <LeftScreen>\r\n          <h1>Understand Functional Programming Terminology</h1>\r\n          <p>\r\n            The FCC Team had a mood swing and now wants two types of tea: green\r\n            tea and black tea. General Fact: Client mood swings are pretty\r\n            common.\r\n          </p>\r\n          <p>\r\n            With that information, we'll need to revisit the\r\n            <Code>getTea</Code> function from last challenge to handle various\r\n            tea requests. We can modify <Code>getTea</Code> to accept a function\r\n            as a parameter to be able to change the type of tea it prepares.\r\n            This makes <Code>getTea</Code> more flexible, and gives the\r\n            programmer more control when client requests change.\r\n          </p>\r\n          <p>But first, let's cover some functional terminology:</p>\r\n          <p>\r\n            <i>Callbacks</i> are the functions that are slipped or passed into\r\n            another function to decide the invocation of that function. You may\r\n            have seen them passed to other methods, for example in\r\n            <Code>filter</Code>, the callback function tells JavaScript the\r\n            criteria for how to filter an array.\r\n          </p>\r\n          <p>\r\n            Functions that can be assigned to a variable, passed into another\r\n            function, or returned from another function just like any other\r\n            normal value, are called <i>first class</i> functions. In\r\n            JavaScript, all functions are first class functions.\r\n          </p>\r\n          <p>\r\n            The functions that take a function as an argument, or return a\r\n            function as a return value, are called <Code>higher</Code> order\r\n            functions.\r\n          </p>\r\n          <p>\r\n            When functions are passed in to or returned from another function,\r\n            then those functions which were passed in or returned can be called\r\n            a lambda.\r\n          </p>\r\n          <hr />\r\n          <p>\r\n            Prepare 27 cups of green tea and 13 cups of black tea and store them\r\n            in <Code>tea4GreenTeamFCC</Code> and\r\n            <Code>tea4BlackTeamFCC</Code> variables, respectively. Note that the\r\n            <Code>getTea</Code> function has been modified so it now takes a\r\n            function as the first argument.\r\n          </p>\r\n          <p>\r\n            Note: The data (the number of cups of tea) is supplied as the last\r\n            argument. We'll discuss this more in later lessons.\r\n          </p>\r\n          <hr />\r\n          <tests />\r\n          <ul class=\"tests\">\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                The <Code>tea4GreenTeamFCC</Code> variable should hold 27 cups\r\n                of green tea for the team.\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                The <Code>tea4GreenTeamFCC</Code> variable should hold cups of\r\n                green tea.\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                The <Code>tea4GreenTeamFCC</Code> variable should hold 13 cups\r\n                of black tea.\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                The <Code>tea4GreenTeamFCC</Code> variable should hold cups of\r\n                black tea.\r\n              </p>\r\n            </li>\r\n          </ul>\r\n        </LeftScreen>\r\n      </div>\r\n      <RightScreen @resize-width=\"changeWidth\"> </RightScreen>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport Navigation from \"@/components/util-components/navigation.vue\";\r\nimport LeftScreen from \"@/components/util-components/left-screen.vue\";\r\nimport Code from \"@/components/util-components/code.vue\";\r\nimport RightScreen from \"@/components/util-components/right-screen.vue\";\r\nimport Tests from \"@/components/util-components/tests.vue\";\r\nimport testsInitial from \"@/components/util-components/svg-components/tests-initial.vue\";\r\nimport { ref } from \"vue\";\r\nconst leftScreenRef = ref();\r\n\r\nfunction changeWidth(n) {\r\n  let size = window.innerWidth - n - 30;\r\n  leftScreenRef.value.style.width = size + \"px\";\r\n}\r\n</script>\r\n","import script from \"./understand-functional-programming-terminology.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./understand-functional-programming-terminology.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"sourceRoot":""}