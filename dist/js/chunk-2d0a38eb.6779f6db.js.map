{"version":3,"sources":["webpack:///./src/views/basic-js/understanding-uninitialized-variables.vue","webpack:///./src/views/basic-js/understanding-uninitialized-variables.vue?7414"],"names":["leftScreenRef","ref","changeWidth","n","size","window","innerWidth","value","style","width","__exports__"],"mappings":"4kEAwEA,MAAMA,EAAgBC,iBAEtB,SAASC,EAAYC,GACnB,IAAIC,EAAOC,OAAOC,WAAaH,EAAI,GACnCH,EAAcO,MAAMC,MAAMC,MAAQL,EAAO,K,i+DCzE3C,MAAMM,GAAc,GAEL","file":"js/chunk-2d0a38eb.6779f6db.js","sourcesContent":["<template>\r\n  <div class=\"test-case\">\r\n    <Navigation />\r\n    <div class=\"screen-divide\">\r\n      <div class=\"left-screen\" ref=\"leftScreenRef\">\r\n        <LeftScreen>\r\n          <h1>Understanding Uninitialized Variables</h1>\r\n          <p>\r\n            When JavaScript variables are declared, they have an initial value\r\n            of <Code>undefined</Code>. If you do a mathematical operation on an\r\n            <Code>undefined</Code> variable your result will be\r\n            <Code>NaN</Code> which means \"Not a Number\". If you concatenate a\r\n            string with an <Code>undefined</Code> variable, you will get a\r\n            string of <Code>undefined</Code>.\r\n          </p>\r\n          <hr />\r\n          <p>\r\n            Initialize the three variables <Code>a</Code>, <Code>b</Code>, and\r\n            <Code>c</Code> with <Code>5</Code>, <Code>10</Code>, and\r\n            <Code>\"I am a\"</Code>\r\n            respectively so that they will not be <Code>undefined</Code>.\r\n          </p>\r\n          <hr />\r\n          <tests />\r\n          <ul class=\"tests\">\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>a</Code> should be defined and have a final value of\r\n                <Code>6</Code>.\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>b</Code> should be defined and have a final value of\r\n                <Code>15</Code>.\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>c</Code> should not contain <Code>undefined</Code> and\r\n                should have a final value of the string\r\n                <Code>I am a String!</Code>\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>You should not change code below the specified comment.</p>\r\n            </li>\r\n          </ul>\r\n        </LeftScreen>\r\n      </div>\r\n      <RightScreen @resize-width=\"changeWidth\">\r\n        <p>\r\n          Lorem ipsum dolor, sit amet consectetur adipisicing elit. Eos,\r\n          doloremque.\r\n        </p>\r\n      </RightScreen>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport Navigation from \"@/components/util-components/navigation.vue\";\r\nimport LeftScreen from \"@/components/util-components/left-screen.vue\";\r\nimport Code from \"@/components/util-components/code.vue\";\r\nimport RightScreen from \"@/components/util-components/right-screen.vue\";\r\nimport Tests from \"@/components/util-components/tests.vue\";\r\nimport testsInitial from \"@/components/util-components/svg-components/tests-initial.vue\";\r\nimport { ref } from \"vue\";\r\nconst leftScreenRef = ref();\r\n\r\nfunction changeWidth(n) {\r\n  let size = window.innerWidth - n - 30;\r\n  leftScreenRef.value.style.width = size + \"px\";\r\n}\r\n</script>\r\n","import script from \"./understanding-uninitialized-variables.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./understanding-uninitialized-variables.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"sourceRoot":""}