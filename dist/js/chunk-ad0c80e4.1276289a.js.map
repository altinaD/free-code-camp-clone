{"version":3,"sources":["webpack:///./src/views/debugging/use-typeof-to-check-the-type-of-a-variable.vue","webpack:///./src/views/debugging/use-typeof-to-check-the-type-of-a-variable.vue?8400","webpack:///./src/components/util-components/comment.vue","webpack:///./src/components/util-components/comment.vue?47ad","webpack:///./src/components/util-components/comment.vue?ebee"],"names":["leftScreenRef","ref","changeWidth","n","size","window","innerWidth","value","style","width","__exports__","class","_createElementBlock","_hoisted_1","_createElementVNode","_renderSlot","_ctx","$slots","undefined","script","render"],"mappings":"8+HAwGA,MAAMA,EAAgBC,iBAEtB,SAASC,EAAYC,GACnB,IAAIC,EAAOC,OAAOC,WAAaH,EAAI,GACnCH,EAAcO,MAAMC,MAAMC,MAAQL,EAAO,K,00ECzG3C,MAAMM,GAAc,GAEL,iB,2DCJRC,MAAM,W,wCAAXC,eAEM,MAFNC,EAEM,CADJC,eAA2B,aAApBC,eAAaC,EAAAC,OAAA,kBAAAC,GAAA,O,mCCDxB,MAAMC,EAAS,GAKTT,EAA2B,IAAgBS,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAE1E,U,kCCRf","file":"js/chunk-ad0c80e4.1276289a.js","sourcesContent":["<template>\r\n  <div class=\"test-case\">\r\n    <Navigation />\r\n    <div class=\"screen-divide\">\r\n      <div class=\"left-screen\" ref=\"leftScreenRef\">\r\n        <LeftScreen>\r\n          <h1>Use typeof to Check the Type of a Variable</h1>\r\n          <p>\r\n            You can use <Code>typeof</Code> to check the data structure, or\r\n            type, of a variable. This is useful in debugging when working with\r\n            multiple data types. If you think you're adding two numbers, but one\r\n            is actually a string, the results can be unexpected. Type errors can\r\n            lurk in calculations or function calls. Be careful especially when\r\n            you're accessing and working with external data in the form of a\r\n            JavaScript Object Notation (JSON) object.\r\n          </p>\r\n          <p>Here are some examples using <Code>typeof</Code>:</p>\r\n          <Comment>\r\n            <span class=\"black\">console.</span>\r\n            <span class=\"red\">log</span>\r\n            <span class=\"black\">(</span>\r\n            <span class=\"blue\">typeof \"\"</span>\r\n            <span class=\"black\">);</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">console.</span>\r\n            <span class=\"red\">log</span>\r\n            <span class=\"black\">(</span>\r\n            <span class=\"blue\">typeof </span>\r\n            <span class=\"purple\">0</span>\r\n            <span class=\"black\">);</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">console.</span>\r\n            <span class=\"red\">log</span>\r\n            <span class=\"black\">(</span>\r\n            <span class=\"blue\">typeof </span>\r\n            <span class=\"black\">[] );</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">console.</span>\r\n            <span class=\"red\">log</span>\r\n            <span class=\"black\">(</span>\r\n            <span class=\"blue\">typeof </span>\r\n            <span class=\"black\">{});</span>\r\n            <div class=\"next\"></div>\r\n          </Comment>\r\n          <p>\r\n            In order, the console will display the strings <Code>string</Code>,\r\n            <Code>number</Code>, and <Code>object</Code>.\r\n          </p>\r\n          <p>\r\n            JavaScript recognizes seven primitive (immutable) data types:\r\n            <Code>Boolean</Code>, <Code>Null</Code>, <Code>Undefined</Code>,\r\n            <Code>Number</Code>, <Code>String</Code>, Symbol (new with ES6), and\r\n            <Code>BigInt</Code> (new with ES2020), and one type for mutable\r\n            items: <Code>Object</Code>. Note that in JavaScript, arrays are\r\n            technically a type of object.\r\n          </p>\r\n          <hr />\r\n          <p>\r\n            Add two <Code>console.log()</Code> statements to check the\r\n            <Code>typeof</Code> each of the two variables <Code>seven</Code> and\r\n            <Code>three</Code> in the code.\r\n          </p>\r\n          <hr />\r\n          <tests />\r\n          <ul class=\"tests\">\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                Your code should use <Code>typeof</Code> in two\r\n                <Code>console.log()</Code> statements to check the type of the\r\n                variables.\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                Your code should use <Code>typeof</Code> to check the type of\r\n                the variable <Code>seven</Code>.\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                Your code should use <Code>typeof</Code> to check the type of\r\n                the variable <Code>three</Code>.\r\n              </p>\r\n            </li>\r\n          </ul>\r\n        </LeftScreen>\r\n      </div>\r\n      <RightScreen @resize-width=\"changeWidth\"> </RightScreen>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport Comment from \"@/components/util-components/comment.vue\";\r\nimport Navigation from \"@/components/util-components/navigation.vue\";\r\nimport LeftScreen from \"@/components/util-components/left-screen.vue\";\r\nimport Code from \"@/components/util-components/code.vue\";\r\nimport RightScreen from \"@/components/util-components/right-screen.vue\";\r\nimport Tests from \"@/components/util-components/tests.vue\";\r\nimport testsInitial from \"@/components/util-components/svg-components/tests-initial.vue\";\r\nimport { ref } from \"vue\";\r\nconst leftScreenRef = ref();\r\n\r\nfunction changeWidth(n) {\r\n  let size = window.innerWidth - n - 30;\r\n  leftScreenRef.value.style.width = size + \"px\";\r\n}\r\n</script>\r\n","import script from \"./use-typeof-to-check-the-type-of-a-variable.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./use-typeof-to-check-the-type-of-a-variable.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  <div class=\"comment\">\r\n    <span> <slot></slot></span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.comment {\r\n  background-color: #f5f2f0;\r\n  padding: 1rem;\r\n  width: 100%;\r\n  margin: 15px 0;\r\n  font-size: 1.12rem;\r\n}\r\n</style>\r\n","import { render } from \"./comment.vue?vue&type=template&id=358fd9c6&scoped=true\"\nconst script = {}\n\nimport \"./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\"\n\nimport exportComponent from \"E:\\\\Altyn\\\\portfolio\\\\vue3\\\\free-code-camp-clone\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-358fd9c6\"]])\n\nexport default __exports__","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\""],"sourceRoot":""}