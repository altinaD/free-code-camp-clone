{"version":3,"sources":["webpack:///./src/views/es6/compare-scopes-of-the-var-and-let-keywords.vue","webpack:///./src/views/es6/compare-scopes-of-the-var-and-let-keywords.vue?559c","webpack:///./src/components/util-components/comment.vue","webpack:///./src/components/util-components/comment.vue?47ad","webpack:///./src/components/util-components/comment.vue?ebee"],"names":["leftScreenRef","ref","changeWidth","n","size","window","innerWidth","value","style","width","__exports__","class","_createElementBlock","_hoisted_1","_createElementVNode","_renderSlot","_ctx","$slots","undefined","script","render"],"mappings":"gmYAsPA,MAAMA,EAAgBC,iBAEtB,SAASC,EAAYC,GACnB,IAAIC,EAAOC,OAAOC,WAAaH,EAAI,GACnCH,EAAcO,MAAMC,MAAMC,MAAQL,EAAO,K,4nJCvP3C,MAAMM,GAAc,GAEL,iB,2DCJRC,MAAM,W,wCAAXC,eAEM,MAFNC,EAEM,CADJC,eAA2B,aAApBC,eAAaC,EAAAC,OAAA,kBAAAC,GAAA,O,mCCDxB,MAAMC,EAAS,GAKTT,EAA2B,IAAgBS,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAE1E,U,kCCRf","file":"js/chunk-51a1bb56.8d295c8f.js","sourcesContent":["<template>\r\n  <div class=\"test-case\">\r\n    <Navigation />\r\n    <div class=\"screen-divide\">\r\n      <div class=\"left-screen\" ref=\"leftScreenRef\">\r\n        <LeftScreen>\r\n          <h1>Compare Scopes of the var and let Keywords</h1>\r\n          <p>\r\n            If you are unfamiliar with <Code>let</Code>, check out\r\n            <router-link\r\n              style=\"color: #000\"\r\n              to=\"/explore-differences-between-the-var-and-let-keywords\"\r\n            >\r\n              this challenge about the difference between <Code>let</Code> and\r\n              <Code>var</Code></router-link\r\n            >.\r\n          </p>\r\n          <p>\r\n            When you declare a variable with the <Code>var</Code> keyword, it is\r\n            declared globally, or locally if declared inside a function.\r\n          </p>\r\n          <p>\r\n            The <Code>let</Code> keyword behaves similarly, but with some extra\r\n            features. When you declare a variable with the\r\n            <Code>let</Code> keyword inside a block, statement, or expression,\r\n            its scope is limited to that block, statement, or expression.\r\n          </p>\r\n          <p>For example:</p>\r\n          <Comment\r\n            ><span class=\"blue\">var </span>\r\n            <span class=\"black\">numArray = [ ]; </span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"blue\">for</span> <span class=\"black\">(</span>\r\n            <span class=\"blue\">var</span> <span class=\"black\"> i = </span>\r\n            <span class=\"purple\">0</span><span class=\"black\">; i &lt; </span> 3\r\n            <span class=\"black\"\r\n              >; i++) {\r\n              <div class=\"next\"></div>\r\n              <span class=\"tab\"></span>numArray.</span\r\n            ><span class=\"red\">push</span\r\n            ><span class=\"black\"\r\n              >(i);\r\n              <div class=\"next\"></div>\r\n              }\r\n              <div class=\"next\"></div>\r\n              console.</span\r\n            ><span class=\"red\">log</span\r\n            ><span class=\"black\"\r\n              >(numArray);\r\n              <div class=\"next\"></div>\r\n              console.</span\r\n            ><span class=\"red\">log</span><span class=\"black\">(i); </span>\r\n            <div class=\"next\"></div>\r\n          </Comment>\r\n          <p>\r\n            Here the console will display the values <Code>[0, 1, 2]</Code> and\r\n            <Code>3</Code>.\r\n          </p>\r\n          <p>\r\n            With the <Code>var</Code> keyword, <Code>i</Code> is declared\r\n            globally. So when <Code>i++</Code> is executed, it updates the\r\n            global variable. This code is similar to the following:\r\n          </p>\r\n          <Comment\r\n            ><span class=\"blue\">var </span>\r\n            <span class=\"black\">numArray = [ ]; </span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"blue\">var </span><span class=\"black\">i;</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"blue\">for</span> <span class=\"black\">(</span>\r\n            <span class=\"blue\">var</span> <span class=\"black\"> i = </span>\r\n            <span class=\"purple\">0</span><span class=\"black\">; i &lt; </span> 3\r\n            <span class=\"black\"\r\n              >; i++) {\r\n              <div class=\"next\"></div>\r\n              <span class=\"tab\"></span>numArray.</span\r\n            ><span class=\"red\">push</span\r\n            ><span class=\"black\"\r\n              >(i);\r\n              <div class=\"next\"></div>\r\n              }\r\n              <div class=\"next\"></div>\r\n              console.</span\r\n            ><span class=\"red\">log</span\r\n            ><span class=\"black\"\r\n              >(numArray);\r\n              <div class=\"next\"></div>\r\n              console.</span\r\n            ><span class=\"red\">log</span><span class=\"black\">(i); </span><br />\r\n          </Comment>\r\n          <p>\r\n            Here the console will display the values <Code>[0, 1, 2]</Code> and\r\n            <Code>3</Code>.\r\n          </p>\r\n          <p>\r\n            This behavior will cause problems if you were to create a function\r\n            and store it for later use inside a <Code>for</Code> loop that uses\r\n            the <Code>i</Code> variable. This is because the stored function\r\n            will always refer to the value of the updated global\r\n            <Code>i</Code> variable.\r\n          </p>\r\n          <Comment>\r\n            <span class=\"blue\">var </span\r\n            ><span class=\"black\">printNumTwo;</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"blue\">for</span> <span class=\"black\">(</span>\r\n            <span class=\"blue\">var</span> <span class=\"black\"> i = </span>\r\n            <span class=\"purple\">0</span><span class=\"black\">; i &lt; </span> 3\r\n            <span class=\"black\">; i++) { </span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span><span class=\"blue\">if</span>\r\n            <span class=\"black\"> (i === </span><span class=\"purple\">2</span\r\n            ><span class=\"black\"> ) {</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span><span class=\"tab\"></span\r\n            ><span class=\"red\">printNumTwo </span>\r\n            <span class=\"blue\">= function</span><span class=\"black\">() {</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span><span class=\"tab\"></span\r\n            ><span class=\"tab\"></span><span class=\"blue\">return </span\r\n            ><span class=\"black\">i;</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span><span class=\"tab\"></span\r\n            ><span class=\"black\">};</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span>\r\n            <span class=\"black\">}</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">}</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">console.</span><span class=\"red\">log</span>\r\n            <span class=\"black\">(</span><span class=\"red\">printNumTwo</span>\r\n            <span class=\"black\">());</span>\r\n          </Comment>\r\n          <p>Here the console will display the value <Code>3</Code>.</p>\r\n          <p>\r\n            As you can see, <Code>printNumTwo()</Code> prints 3 and not 2. This\r\n            is because the value assigned to <Code>i</Code> was updated and the\r\n            <Code>printNumTwo()</Code> returns the global <Code>i</Code> and not\r\n            the value <Code>i</Code> had when the function was created in the\r\n            for loop. The <Code>let</Code> keyword does not follow this\r\n            behavior:\r\n          </p>\r\n          <Comment>\r\n            <span class=\"blue\">var </span\r\n            ><span class=\"black\">printNumTwo;</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"blue\">for</span> <span class=\"black\">(</span>\r\n            <span class=\"blue\">var</span> <span class=\"black\"> i = </span>\r\n            <span class=\"purple\">0</span><span class=\"black\">; i &lt; </span> 3\r\n            <span class=\"black\">; i++) { </span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span><span class=\"blue\">if</span>\r\n            <span class=\"black\"> (i === </span><span class=\"purple\">2</span\r\n            ><span class=\"black\"> ) {</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span><span class=\"tab\"></span\r\n            ><span class=\"red\">printNumTwo </span>\r\n            <span class=\"blue\">= function</span><span class=\"black\">() {</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span><span class=\"tab\"></span\r\n            ><span class=\"tab\"></span><span class=\"blue\">return </span\r\n            ><span class=\"black\">i;</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span><span class=\"tab\"></span\r\n            ><span class=\"black\">};</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span>\r\n            <span class=\"black\">}</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">}</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">console.</span><span class=\"red\">log</span>\r\n            <span class=\"black\">(</span><span class=\"red\">printNumTwo</span>\r\n            <span class=\"black\">());</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">console.</span><span class=\"red\">log</span>\r\n            <span class=\"black\">(</span>\r\n            <span class=\"black\">i);</span>\r\n          </Comment>\r\n          <p>\r\n            Here the console will display the value <Code>2</Code>, and an error\r\n            that <Code>i is not defined</Code>.\r\n          </p>\r\n          <p>\r\n            <Code>i</Code> is not defined because it was not declared in the\r\n            global scope. It is only declared within the <Code>for</Code> loop\r\n            statement. <Code>printNumTwo()</Code> returned the correct value\r\n            because three different <Code>i</Code> variables with unique values\r\n            (0, 1, and 2) were created by the <Code>let</Code> keyword within\r\n            the loop statement.\r\n          </p>\r\n          <hr />\r\n          <p>\r\n            Fix the code so that <Code>i</Code> declared in the\r\n            <Code>if</Code> statement is a separate variable than\r\n            <Code>i</Code> declared in the first line of the function. Be\r\n            certain not to use the <Code>var</Code> keyword anywhere in your\r\n            code.\r\n          </p>\r\n          <p>\r\n            This exercise is designed to illustrate the difference between how\r\n            <Code>var</Code> and <Code>let</Code> keywords assign scope to the\r\n            declared variable. When programming a function similar to the one\r\n            used in this exercise, it is often better to use different variable\r\n            names to avoid confusion.\r\n          </p>\r\n          <hr />\r\n          <tests />\r\n          <ul class=\"tests\">\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p><Code>var</Code> should not exist in code.</p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                The variable <Code>i</Code> declared in the\r\n                <Code>if</Code> statement should equal the string\r\n                <Code>block scope</Code>.\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>checkScope()</Code> should return the string\r\n                <Code>function scope</Code>\r\n              </p>\r\n            </li>\r\n          </ul>\r\n        </LeftScreen>\r\n      </div>\r\n      <RightScreen @resize-width=\"changeWidth\"> </RightScreen>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport Comment from \"@/components/util-components/comment.vue\";\r\nimport Navigation from \"@/components/util-components/navigation.vue\";\r\nimport LeftScreen from \"@/components/util-components/left-screen.vue\";\r\nimport Code from \"@/components/util-components/code.vue\";\r\nimport RightScreen from \"@/components/util-components/right-screen.vue\";\r\nimport Tests from \"@/components/util-components/tests.vue\";\r\nimport testsInitial from \"@/components/util-components/svg-components/tests-initial.vue\";\r\nimport { ref } from \"vue\";\r\nconst leftScreenRef = ref();\r\n\r\nfunction changeWidth(n) {\r\n  let size = window.innerWidth - n - 30;\r\n  leftScreenRef.value.style.width = size + \"px\";\r\n}\r\n</script>\r\n","import script from \"./compare-scopes-of-the-var-and-let-keywords.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./compare-scopes-of-the-var-and-let-keywords.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  <div class=\"comment\">\r\n    <span> <slot></slot></span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.comment {\r\n  background-color: #f5f2f0;\r\n  padding: 1rem;\r\n  width: 100%;\r\n  margin: 15px 0;\r\n  font-size: 1.12rem;\r\n}\r\n</style>\r\n","import { render } from \"./comment.vue?vue&type=template&id=358fd9c6&scoped=true\"\nconst script = {}\n\nimport \"./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\"\n\nimport exportComponent from \"E:\\\\Altyn\\\\portfolio\\\\vue3\\\\free-code-camp-clone\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-358fd9c6\"]])\n\nexport default __exports__","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\""],"sourceRoot":""}