{"version":3,"sources":["webpack:///./src/views/es6/complete-a-promise-with-resolve-and-reject.vue","webpack:///./src/views/es6/complete-a-promise-with-resolve-and-reject.vue?69db","webpack:///./src/components/util-components/comment.vue","webpack:///./src/components/util-components/comment.vue?47ad","webpack:///./src/components/util-components/comment.vue?ebee"],"names":["leftScreenRef","ref","changeWidth","n","size","window","innerWidth","value","style","width","__exports__","class","_createElementBlock","_hoisted_1","_createElementVNode","_renderSlot","_ctx","$slots","undefined","script","render"],"mappings":"6oIAiGA,MAAMA,EAAgBC,iBAEtB,SAASC,EAAYC,GACnB,IAAIC,EAAOC,OAAOC,WAAaH,EAAI,GACnCH,EAAcO,MAAMC,MAAMC,MAAQL,EAAO,K,mvEClG3C,MAAMM,GAAc,GAEL,iB,oFCJRC,MAAM,W,wCAAXC,eAEM,MAFNC,EAEM,CADJC,eAA2B,aAApBC,eAAaC,EAAAC,OAAA,kBAAAC,GAAA,O,mCCDxB,MAAMC,EAAS,GAKTT,EAA2B,IAAgBS,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAE1E,U,kCCRf","file":"js/chunk-274f01cd.c7d14061.js","sourcesContent":["<template>\r\n  <div class=\"test-case\">\r\n    <Navigation />\r\n    <div class=\"screen-divide\">\r\n      <div class=\"left-screen\" ref=\"leftScreenRef\">\r\n        <LeftScreen>\r\n          <h1>Complete a Promise with resolve and reject</h1>\r\n          <p>\r\n            A promise has three states: <Code>pending</Code>,\r\n            <Code>fulfilled</Code>, and <Code>rejected</Code>. The promise you\r\n            created in the last challenge is forever stuck in the\r\n            <Code>pending</Code> state because you did not add a way to complete\r\n            the promise. The <Code>resolve</Code> and\r\n            <Code>reject</Code> parameters given to the promise argument are\r\n            used to do this. <Code>resolve</Code> is used when you want your\r\n            promise to succeed, and <Code>reject</Code> is used when you want it\r\n            to fail. These are methods that take an argument, as seen below.\r\n          </p>\r\n          <Comment>\r\n            <span class=\"blue\">const </span>\r\n            <span class=\"black\">myPromise = </span>\r\n            <span class=\"blue\">new </span>\r\n            <span class=\"red\">Promise</span>\r\n            <span class=\"black\">((resolve, reject) => {</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab blue\">if</span>\r\n            <span class=\"black\">(condition here) {</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span><span class=\"tab\"></span>\r\n            <span class=\"red\">resolve</span>\r\n            <span class=\"black\">(</span>\r\n            <span class=\"green\">\"Promise was fulfilled\"</span>\r\n            <span class=\"black\">);</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab black\">} </span>\r\n            <span class=\"blue\">else </span>\r\n            <span class=\"black\">{</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span><span class=\"tab\"></span>\r\n            <span class=\"red\">reject</span>\r\n            <span class=\"black\">(</span>\r\n            <span class=\"green\">\"Promise was rejected\"</span>\r\n            <span class=\"black\">);</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab black\">}</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">});</span>\r\n          </Comment>\r\n          <p>\r\n            The example above uses strings for the argument of these functions,\r\n            but it can really be anything. Often, it might be an object, that\r\n            you would use data from, to put on your website or elsewhere.\r\n          </p>\r\n          <hr />\r\n          <p>\r\n            Make the promise handle success and failure. If\r\n            <Code>responseFromServer</Code> is <Code>true</Code>, call the\r\n            <Code>resolve</Code> method to successfully complete the promise.\r\n            Pass <Code>resolve</Code> a string with the value\r\n            <Code>We got the data</Code>. If <Code>responseFromServer</Code> is\r\n            <Code>false</Code>, use the <Code>reject</Code> method instead and\r\n            pass it the string: <Code>Data not received</Code>.\r\n          </p>\r\n          <hr />\r\n          <tests />\r\n          <ul class=\"tests\">\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>resolve</Code> should be called with the expected string\r\n                when the <Code>if</Code> condition is <Code>true</Code>.\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>reject</Code> should be called with the expected string\r\n                when the <Code>if</Code> condition is <Code>false</Code>.\r\n              </p>\r\n            </li>\r\n          </ul>\r\n        </LeftScreen>\r\n      </div>\r\n      <RightScreen @resize-width=\"changeWidth\"> </RightScreen>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport Comment from \"@/components/util-components/comment.vue\";\r\nimport Navigation from \"@/components/util-components/navigation.vue\";\r\nimport LeftScreen from \"@/components/util-components/left-screen.vue\";\r\nimport Code from \"@/components/util-components/code.vue\";\r\nimport RightScreen from \"@/components/util-components/right-screen.vue\";\r\nimport Tests from \"@/components/util-components/tests.vue\";\r\nimport testsInitial from \"@/components/util-components/svg-components/tests-initial.vue\";\r\nimport { ref } from \"vue\";\r\nconst leftScreenRef = ref();\r\n\r\nfunction changeWidth(n) {\r\n  let size = window.innerWidth - n - 30;\r\n  leftScreenRef.value.style.width = size + \"px\";\r\n}\r\n</script>\r\n","import script from \"./complete-a-promise-with-resolve-and-reject.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./complete-a-promise-with-resolve-and-reject.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  <div class=\"comment\">\r\n    <span> <slot></slot></span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.comment {\r\n  background-color: #f5f2f0;\r\n  padding: 1rem;\r\n  width: 100%;\r\n  margin: 15px 0;\r\n  font-size: 1.12rem;\r\n}\r\n</style>\r\n","import { render } from \"./comment.vue?vue&type=template&id=358fd9c6&scoped=true\"\nconst script = {}\n\nimport \"./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\"\n\nimport exportComponent from \"E:\\\\Altyn\\\\portfolio\\\\vue3\\\\free-code-camp-clone\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-358fd9c6\"]])\n\nexport default __exports__","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\""],"sourceRoot":""}