{"version":3,"sources":["webpack:///./src/views/es6/use-getters-and-setters-to-control-access-to-an-object.vue","webpack:///./src/views/es6/use-getters-and-setters-to-control-access-to-an-object.vue?1842","webpack:///./src/components/util-components/comment.vue","webpack:///./src/components/util-components/comment.vue?47ad","webpack:///./src/components/util-components/comment.vue?ebee"],"names":["leftScreenRef","ref","changeWidth","n","size","window","innerWidth","value","style","width","__exports__","class","_createElementBlock","_hoisted_1","_createElementVNode","_renderSlot","_ctx","$slots","undefined","script","render"],"mappings":"8tOAyLA,MAAMA,EAAgBC,iBAEtB,SAASC,EAAYC,GACnB,IAAIC,EAAOC,OAAOC,WAAaH,EAAI,GACnCH,EAAcO,MAAMC,MAAMC,MAAQL,EAAO,K,0wFC1L3C,MAAMM,GAAc,GAEL,iB,2DCJRC,MAAM,W,wCAAXC,eAEM,MAFNC,EAEM,CADJC,eAA2B,aAApBC,eAAaC,EAAAC,OAAA,kBAAAC,GAAA,O,mCCDxB,MAAMC,EAAS,GAKTT,EAA2B,IAAgBS,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAE1E,U,kCCRf","file":"js/chunk-3dea36fa.0015bff7.js","sourcesContent":["<template>\r\n  <div class=\"test-case\">\r\n    <Navigation />\r\n    <div class=\"screen-divide\">\r\n      <div class=\"left-screen\" ref=\"leftScreenRef\">\r\n        <LeftScreen>\r\n          <h1>Use getters and setters to Control Access to an Object</h1>\r\n          <p>\r\n            You can obtain values from an object and set the value of a property\r\n            within an object.\r\n          </p>\r\n          <p>These are classically called getters and setters.</p>\r\n          <p>\r\n            Getter functions are meant to simply return (get) the value of an\r\n            object's private variable to the user without the user directly\r\n            accessing the private variable.\r\n          </p>\r\n          <p>\r\n            Setter functions are meant to modify (set) the value of an object's\r\n            private variable based on the value passed into the setter function.\r\n            This change could involve calculations, or even overwriting the\r\n            previous value completely.\r\n          </p>\r\n          <Comment>\r\n            <span class=\"blue\">const </span>\r\n            <span class=\"red\">Book </span>\r\n            <span class=\"black\">{</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span>\r\n            <span class=\"red\">constructor</span>\r\n            <span class=\"black\">(author) {</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span><span class=\"tab\"></span>\r\n            <span class=\"blue\">this</span>\r\n            <span class=\"black\">._author = author;</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span>\r\n            <span class=\"black\">}</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\">// getter</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab blue\">get </span>\r\n            <span class=\"red\">writer</span>\r\n            <span class=\"black\">() {</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span><span class=\"tab\"></span>\r\n            <span class=\"blue\">return this</span>\r\n            <span class=\"black\">._author;</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab black\">}</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\">// setter</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab blue\">set </span>\r\n            <span class=\"red\">writer</span>\r\n            <span class=\"black\">(updateAuthor) {</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span><span class=\"tab\"></span>\r\n            <span class=\"blue\">this</span>\r\n            <span class=\"black\">._author = updateAuthor;</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab black\">}</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"blue\">const </span>\r\n            <span class=\"black\">novel = </span>\r\n            <span class=\"blue\">new </span>\r\n            <span class=\"red\">Book</span>\r\n            <span class=\"black\">( </span>\r\n            <span class=\"green\">'anonymous' </span>\r\n            <span class=\"black\">);</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">console.</span>\r\n            <span class=\"red\">log</span>\r\n            <span class=\"black\">(novel.writer);</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">novel.writer = </span>\r\n            <span class=\"green\">'newAuthor'</span>\r\n            <span class=\"black\">;</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">console.</span>\r\n            <span class=\"red\">log</span>\r\n            <span class=\"black\">(novel.writer);</span>\r\n            <div class=\"next\"></div>\r\n          </Comment>\r\n          <p>\r\n            The console would display the strings <Code>anonymous</Code> and\r\n            <Code>newAuthor</Code>.\r\n          </p>\r\n          <p>\r\n            Notice the syntax used to invoke the getter and setter. They do not\r\n            even look like functions. Getters and setters are important because\r\n            they hide internal implementation details.\r\n          </p>\r\n          <p>\r\n            <b>Note:</b> It is convention to precede the name of a private\r\n            variable with an underscore (<Code>_</Code>). However, the practice\r\n            itself does not make a variable private.\r\n          </p>\r\n          <hr />\r\n          <p>\r\n            Use the <Code>class</Code> keyword to create a\r\n            <Code>Thermostat</Code> class. The <Code>constructor</Code>\r\n            accepts a Fahrenheit temperature.\r\n          </p>\r\n          <p>\r\n            In the class, create a <Code>getter</Code> to obtain the temperature\r\n            in Celsius and a setter that accepts a temperature in Celsius.\r\n          </p>\r\n          <p>\r\n            Remember that <Code>C = 5/9 * (F - 32)</Code> and\r\n            <Code>F = C * 9.0 / 5 + 32</Code>, where <Code>F</Code> is the value\r\n            of temperature in Fahrenheit, and <Code>C</Code> is the value of the\r\n            same temperature in Celsius.\r\n          </p>\r\n          <p>\r\n            <b>Note:</b> When you implement this, you will track the temperature\r\n            inside the class in one scale, either Fahrenheit or Celsius.\r\n          </p>\r\n          <p>\r\n            This is the power of a getter and a setter. You are creating an API\r\n            for another user, who can get the correct result regardless of which\r\n            one you track.\r\n          </p>\r\n          <p>\r\n            In other words, you are abstracting implementation details from the\r\n            user.\r\n          </p>\r\n          <hr />\r\n          <tests />\r\n          <ul class=\"tests\">\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>Thermostat</Code> should be a <Code>class</Code> with a\r\n                defined <Code>constructor</Code> method.\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>The <Code>class</Code> keyword should be used.</p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p><Code>Thermostat</Code> should be able to be instantiated.</p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                When instantiated with a Fahrenheit value,\r\n                <Code>Thermostat</Code> should set the correct\r\n                <Code>temperature</Code>.\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>A <Code>getter</Code> should be defined.</p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>A <Code>setter</Code> should be defined.</p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                Calling the <Code>setter</Code> with a Celsius value should set\r\n                the <Code>temperature</Code>.\r\n              </p>\r\n            </li>\r\n          </ul>\r\n        </LeftScreen>\r\n      </div>\r\n      <RightScreen @resize-width=\"changeWidth\"> </RightScreen>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport Comment from \"@/components/util-components/comment.vue\";\r\nimport Navigation from \"@/components/util-components/navigation.vue\";\r\nimport LeftScreen from \"@/components/util-components/left-screen.vue\";\r\nimport Code from \"@/components/util-components/code.vue\";\r\nimport RightScreen from \"@/components/util-components/right-screen.vue\";\r\nimport Tests from \"@/components/util-components/tests.vue\";\r\nimport testsInitial from \"@/components/util-components/svg-components/tests-initial.vue\";\r\nimport { ref } from \"vue\";\r\nconst leftScreenRef = ref();\r\n\r\nfunction changeWidth(n) {\r\n  let size = window.innerWidth - n - 30;\r\n  leftScreenRef.value.style.width = size + \"px\";\r\n}\r\n</script>\r\n","import script from \"./use-getters-and-setters-to-control-access-to-an-object.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./use-getters-and-setters-to-control-access-to-an-object.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  <div class=\"comment\">\r\n    <span> <slot></slot></span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.comment {\r\n  background-color: #f5f2f0;\r\n  padding: 1rem;\r\n  width: 100%;\r\n  margin: 15px 0;\r\n  font-size: 1.12rem;\r\n}\r\n</style>\r\n","import { render } from \"./comment.vue?vue&type=template&id=358fd9c6&scoped=true\"\nconst script = {}\n\nimport \"./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\"\n\nimport exportComponent from \"E:\\\\Altyn\\\\portfolio\\\\vue3\\\\free-code-camp-clone\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-358fd9c6\"]])\n\nexport default __exports__","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\""],"sourceRoot":""}