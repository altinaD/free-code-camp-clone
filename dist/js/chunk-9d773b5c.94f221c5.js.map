{"version":3,"sources":["webpack:///./src/views/basic-ds/access-an-array's-contents-using-bracket-notation.vue","webpack:///./src/views/basic-ds/access-an-array's-contents-using-bracket-notation.vue?6a4f","webpack:///./src/components/util-components/comment.vue","webpack:///./src/components/util-components/comment.vue?47ad","webpack:///./src/components/util-components/comment.vue?ebee"],"names":["leftScreenRef","ref","changeWidth","n","size","window","innerWidth","value","style","width","__exports__","class","_createElementBlock","_hoisted_1","_createElementVNode","_renderSlot","_ctx","$slots","undefined","script","render"],"mappings":"kjIAqHA,MAAMA,EAAgBC,iBAEtB,SAASC,EAAYC,GACnB,IAAIC,EAAOC,OAAOC,WAAaH,EAAI,GACnCH,EAAcO,MAAMC,MAAMC,MAAQL,EAAO,K,09ECtH3C,MAAMM,GAAc,GAEL,iB,2DCJRC,MAAM,W,wCAAXC,eAEM,MAFNC,EAEM,CADJC,eAA2B,aAApBC,eAAaC,EAAAC,OAAA,kBAAAC,GAAA,O,mCCDxB,MAAMC,EAAS,GAKTT,EAA2B,IAAgBS,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAE1E,U,kCCRf","file":"js/chunk-9d773b5c.94f221c5.js","sourcesContent":["<template>\r\n  <div class=\"test-case\">\r\n    <Navigation />\r\n    <div class=\"screen-divide\">\r\n      <div class=\"left-screen\" ref=\"leftScreenRef\">\r\n        <LeftScreen>\r\n          <h1>Access an Array's Contents Using Bracket Notation</h1>\r\n          <p>\r\n            The fundamental feature of any data structure is, of course, the\r\n            ability to not only store data, but to be able to retrieve that data\r\n            on command. So, now that we've learned how to create an array, let's\r\n            begin to think about how we can access that array's information.\r\n          </p>\r\n          <p>\r\n            When we define a simple array as seen below, there are 3 items in\r\n            it:\r\n          </p>\r\n          <Comment>\r\n            <span class=\"blue\">let </span>\r\n            <span class=\"black\">ourArray = [ </span>\r\n            <span class=\"green\">\"a\"</span>\r\n            <span class=\"black\">, </span>\r\n            <span class=\"green\">\"b\"</span>\r\n            <span class=\"black\">, </span>\r\n            <span class=\"green\">\"c\" </span>\r\n            <span class=\"black\">];</span>\r\n          </Comment>\r\n          <p>\r\n            In an array, each array item has an <Code>index</Code>. This index\r\n            doubles as the position of that item in the array, and how you\r\n            reference it. However, it is important to note, that JavaScript\r\n            arrays are <Code>zero-indexed</Code>, meaning that the first element\r\n            of an array is actually at the <b>zeroth</b> position, not the\r\n            first. In order to retrieve an element from an array we can enclose\r\n            an index in brackets and append it to the end of an array, or more\r\n            commonly, to a variable which references an array object. This is\r\n            known as <Code>bracket notation</Code>. For example, if we want to\r\n            retrieve the <Code>a</Code> from <Code>ourArray</Code> and assign it\r\n            to a variable, we can do so with the following code:\r\n          </p>\r\n          <Comment>\r\n            <span class=\"blue\">let </span>\r\n            <span class=\"black\">ourArray = ourArray[ </span>\r\n            <span class=\"purple\">0 </span>\r\n            <span class=\"black\">];</span>\r\n          </Comment>\r\n          <p>Now <Code>ourVariable</Code> has the value of <Code>a</Code>.</p>\r\n          <p>\r\n            In addition to accessing the value associated with an index, you can\r\n            also set an index to a value using the same notation:\r\n          </p>\r\n          <Comment>\r\n            <span class=\"black\">ourArray[ </span>\r\n            <span class=\"purple\">1</span>\r\n            <span class=\"black\"> ] = </span>\r\n            <span class=\"green\">\"not b anymore\"</span>\r\n            <span class=\"black\">;</span>\r\n          </Comment>\r\n          <p>\r\n            Using bracket notation, we have now reset the item at index 1 from\r\n            the string <Code>b</Code>, to <Code>not b anymore</Code>. Now\r\n            <Code>ourArray</Code> is <Code>[\"a\", \"not b anymore\", \"c\"]</Code>.\r\n          </p>\r\n          <hr />\r\n          <p>\r\n            In order to complete this challenge, set the 2nd position (index\r\n            <Code>1</Code>) of <Code>myArray</Code> to anything you want,\r\n            besides the letter <Code>b</Code>.\r\n          </p>\r\n          <hr />\r\n          <tests />\r\n          <ul class=\"tests\">\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>myArray[0]</Code> should be equal to the letter\r\n                <Code>a</Code>\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>myArray[1]</Code> should not be equal to the letter\r\n                <Code>b</Code>\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>myArray[2]</Code> should be equal to the letter\r\n                <Code>c</Code>\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>myArray[3]</Code> should be equal to the letter\r\n                <Code>d</Code>\r\n              </p>\r\n            </li>\r\n          </ul>\r\n        </LeftScreen>\r\n      </div>\r\n      <RightScreen @resize-width=\"changeWidth\"> </RightScreen>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport Comment from \"@/components/util-components/comment.vue\";\r\nimport Navigation from \"@/components/util-components/navigation.vue\";\r\nimport LeftScreen from \"@/components/util-components/left-screen.vue\";\r\nimport Code from \"@/components/util-components/code.vue\";\r\nimport RightScreen from \"@/components/util-components/right-screen.vue\";\r\nimport Tests from \"@/components/util-components/tests.vue\";\r\nimport testsInitial from \"@/components/util-components/svg-components/tests-initial.vue\";\r\nimport { ref } from \"vue\";\r\nconst leftScreenRef = ref();\r\n\r\nfunction changeWidth(n) {\r\n  let size = window.innerWidth - n - 30;\r\n  leftScreenRef.value.style.width = size + \"px\";\r\n}\r\n</script>\r\n","import script from \"./access-an-array's-contents-using-bracket-notation.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./access-an-array's-contents-using-bracket-notation.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  <div class=\"comment\">\r\n    <span> <slot></slot></span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.comment {\r\n  background-color: #f5f2f0;\r\n  padding: 1rem;\r\n  width: 100%;\r\n  margin: 15px 0;\r\n  font-size: 1.12rem;\r\n}\r\n</style>\r\n","import { render } from \"./comment.vue?vue&type=template&id=358fd9c6&scoped=true\"\nconst script = {}\n\nimport \"./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\"\n\nimport exportComponent from \"E:\\\\Altyn\\\\portfolio\\\\vue3\\\\free-code-camp-clone\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-358fd9c6\"]])\n\nexport default __exports__","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\""],"sourceRoot":""}