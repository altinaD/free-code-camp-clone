{"version":3,"sources":["webpack:///./src/views/es6/create-strings-using-template-literals.vue","webpack:///./src/views/es6/create-strings-using-template-literals.vue?a9f6","webpack:///./src/components/util-components/comment.vue","webpack:///./src/components/util-components/comment.vue?47ad","webpack:///./src/components/util-components/comment.vue?ebee"],"names":["leftScreenRef","ref","list1","list2","list3","changeWidth","n","size","window","innerWidth","value","style","width","__exports__","class","_createElementBlock","_hoisted_1","_createElementVNode","_renderSlot","_ctx","$slots","undefined","script","render"],"mappings":"gwKA6IA,MAAMA,EAAgBC,iBAEtB,IAAIC,EAAQD,eAAI,wCACdE,GAAQF,eAAI,4CACZG,GAAQH,eAAI,2CAEd,SAASI,GAAYC,GACnB,IAAIC,EAAOC,OAAOC,WAAaH,EAAI,GACnCN,EAAcU,MAAMC,MAAMC,MAAQL,EAAO,K,+iEClJ3C,MAAMM,GAAc,GAEL,iB,2DCJRC,MAAM,W,wCAAXC,eAEM,MAFNC,EAEM,CADJC,eAA2B,aAApBC,eAAaC,EAAAC,OAAA,kBAAAC,GAAA,O,mCCDxB,MAAMC,EAAS,GAKTT,EAA2B,IAAgBS,EAAQ,CAAC,CAAC,SAASC,GAAQ,CAAC,YAAY,qBAE1E,U,kCCRf","file":"js/chunk-745f04ee.7dbc1afc.js","sourcesContent":["<template>\r\n  <div class=\"test-case\">\r\n    <Navigation />\r\n    <div class=\"screen-divide\">\r\n      <div class=\"left-screen\" ref=\"leftScreenRef\">\r\n        <LeftScreen>\r\n          <h1>Create Strings using Template Literals</h1>\r\n          <p>\r\n            A new feature of ES6 is the <i>template literal</i>. This is a\r\n            special type of string that makes creating complex strings easier.\r\n          </p>\r\n          <p>\r\n            Template literals allow you to create multi-line strings and to use\r\n            string interpolation features to create strings.\r\n          </p>\r\n          <p>Consider the code below:</p>\r\n          <Comment>\r\n            <span class=\"blue\">const </span>\r\n            <span class=\"black\">person = {</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span>\r\n            <span class=\"red\">name</span>\r\n            <span class=\"black\">: </span>\r\n            <span class=\"green\">\"Zodiac Hasbro\"</span>\r\n            <span class=\"black\">, </span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span>\r\n            <span class=\"red\">age</span>\r\n            <span class=\"black\">: </span>\r\n            <span class=\"green\">56</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">};</span>\r\n            <div class=\"next\"></div>\r\n            <div class=\"next\"></div>\r\n            <span class=\"blue\">const </span>\r\n            <span class=\"black\">greeting = </span>\r\n            <span class=\"green\">`Hello, my name is </span>\r\n            <span class=\"black\">${ person.name }</span>\r\n            <span class=\"green\">!</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"green\">I am </span>\r\n            <span class=\"black\">${ person.age } </span>\r\n            <span class=\"green\">years old.`</span>\r\n            <span class=\"black\">;</span>\r\n            <div class=\"next\"></div>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">console.</span>\r\n            <span class=\"red\">log</span>\r\n            <span class=\"black\">(greeting);</span>\r\n          </Comment>\r\n          <p>\r\n            The console will display the strings\r\n            <Code>Hello, my name is Zodiac Hasbro!</Code> and\r\n            <Code>I am 56 years old.</Code>.\r\n          </p>\r\n          <p>\r\n            A lot of things happened there. Firstly, the example uses backticks\r\n            (<Code>`</Code>), not quotes (<Code>'</Code> or <Code>\"</Code>), to\r\n            wrap the string. Secondly, notice that the string is multi-line,\r\n            both in the code and the output. This saves inserting\r\n            <Code>\\n</Code> within strings. The <Code>${variable}</Code> syntax\r\n            used above is a placeholder. Basically, you won't have to use\r\n            concatenation with the <Code>+</Code> operator anymore. To add\r\n            variables to strings, you just drop the variable in a template\r\n            string and wrap it with <Code>${</Code> and <Code>}</Code>.\r\n            Similarly, you can include other expressions in your string literal,\r\n            for example <Code>${a + b}</Code>. This new way of creating strings\r\n            gives you more flexibility to create robust strings.\r\n          </p>\r\n          <hr />\r\n          <p>\r\n            Use template literal syntax with backticks to create an array of\r\n            list element (li) strings. Each list element's text should be one of\r\n            the array elements from the failure property on the result object\r\n            and have a class attribute with the value text-warning. The makeList\r\n            function should return the array of list item strings.\r\n          </p>\r\n          <p>\r\n            Use an iterator method (any kind of loop) to get the desired output\r\n            (shown below).\r\n          </p>\r\n          <Comment>\r\n            <span class=\"black\">[</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span>\r\n            <span class=\"green\"> '{{ list1 }}' </span>\r\n            <span class=\"black\">,</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span>\r\n            <span class=\"green\">'{{ list2 }}'</span>\r\n            <span class=\"black\">,</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"tab\"></span>\r\n            <span class=\"green\">'{{ list3 }}'</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">]</span>\r\n          </Comment>\r\n          <hr />\r\n          <tests />\r\n          <ul class=\"tests\">\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>failuresList</Code> should be an array containing\r\n                <Code>result failure</Code> messages.\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>failuresList</Code> should be equal to the specified\r\n                output.\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                Template strings and expression interpolation should be used.\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>An iterator should be used.</p>\r\n            </li>\r\n          </ul>\r\n        </LeftScreen>\r\n      </div>\r\n      <RightScreen @resize-width=\"changeWidth\"> </RightScreen>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport Comment from \"@/components/util-components/comment.vue\";\r\nimport Navigation from \"@/components/util-components/navigation.vue\";\r\nimport LeftScreen from \"@/components/util-components/left-screen.vue\";\r\nimport Code from \"@/components/util-components/code.vue\";\r\nimport RightScreen from \"@/components/util-components/right-screen.vue\";\r\nimport Tests from \"@/components/util-components/tests.vue\";\r\nimport testsInitial from \"@/components/util-components/svg-components/tests-initial.vue\";\r\nimport { ref } from \"vue\";\r\nconst leftScreenRef = ref();\r\n\r\nlet list1 = ref('<li class=\"text-warning\">no-var</li>'),\r\n  list2 = ref('<li class=\"text-warning\">var-on-top</li>'),\r\n  list3 = ref('<li class=\"text-warning\">linebreak</li>');\r\n\r\nfunction changeWidth(n) {\r\n  let size = window.innerWidth - n - 30;\r\n  leftScreenRef.value.style.width = size + \"px\";\r\n}\r\n</script>\r\n","import script from \"./create-strings-using-template-literals.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./create-strings-using-template-literals.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  <div class=\"comment\">\r\n    <span> <slot></slot></span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.comment {\r\n  background-color: #f5f2f0;\r\n  padding: 1rem;\r\n  width: 100%;\r\n  margin: 15px 0;\r\n  font-size: 1.12rem;\r\n}\r\n</style>\r\n","import { render } from \"./comment.vue?vue&type=template&id=358fd9c6&scoped=true\"\nconst script = {}\n\nimport \"./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\"\n\nimport exportComponent from \"E:\\\\Altyn\\\\portfolio\\\\vue3\\\\free-code-camp-clone\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-358fd9c6\"]])\n\nexport default __exports__","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\""],"sourceRoot":""}