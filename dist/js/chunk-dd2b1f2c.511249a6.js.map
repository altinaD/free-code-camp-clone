{"version":3,"sources":["webpack:///./src/components/util-components/comment.vue","webpack:///./src/components/util-components/comment.vue?47ad","webpack:///./src/components/util-components/comment.vue?ebee","webpack:///./src/views/basic-ds/add-items-to-an-array-with-push()-and-unshift().vue","webpack:///./src/views/basic-ds/add-items-to-an-array-with-push()-and-unshift().vue?dcde"],"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_renderSlot","_ctx","$slots","undefined","script","__exports__","render","leftScreenRef","ref","changeWidth","n","size","window","innerWidth","value","style","width"],"mappings":"kKACOA,MAAM,W,wCAAXC,eAEM,MAFNC,EAEM,CADJC,eAA2B,aAApBC,eAAaC,EAAAC,OAAA,kBAAAC,GAAA,O,mCCDxB,MAAMC,EAAS,GAKTC,EAA2B,IAAgBD,EAAQ,CAAC,CAAC,SAASE,GAAQ,CAAC,YAAY,qBAE1E,U,kCCRf,W,6pHCyGA,MAAMC,EAAgBC,iBAEtB,SAASC,EAAYC,GACnB,IAAIC,EAAOC,OAAOC,WAAaH,EAAI,GACnCH,EAAcO,MAAMC,MAAMC,MAAQL,EAAO,K,0pEC1G3C,MAAMN,GAAc,GAEL","file":"js/chunk-dd2b1f2c.511249a6.js","sourcesContent":["<template>\r\n  <div class=\"comment\">\r\n    <span> <slot></slot></span>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.comment {\r\n  background-color: #f5f2f0;\r\n  padding: 1rem;\r\n  width: 100%;\r\n  margin: 15px 0;\r\n  font-size: 1.12rem;\r\n}\r\n</style>\r\n","import { render } from \"./comment.vue?vue&type=template&id=358fd9c6&scoped=true\"\nconst script = {}\n\nimport \"./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\"\n\nimport exportComponent from \"E:\\\\Altyn\\\\portfolio\\\\vue3\\\\free-code-camp-clone\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-358fd9c6\"]])\n\nexport default __exports__","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--1-1!./comment.vue?vue&type=style&index=0&id=358fd9c6&scoped=true&lang=css\"","<template>\r\n  <div class=\"test-case\">\r\n    <Navigation />\r\n    <div class=\"screen-divide\">\r\n      <div class=\"left-screen\" ref=\"leftScreenRef\">\r\n        <LeftScreen>\r\n          <h1>Add Items to an Array with push() and unshift()</h1>\r\n          <p>\r\n            An array's length, like the data types it can contain, is not fixed.\r\n            Arrays can be defined with a length of any number of elements, and\r\n            elements can be added or removed over time; in other words, arrays\r\n            are mutable. In this challenge, we will look at two methods with\r\n            which we can programmatically modify an array:\r\n            <Code>Array.push()</Code> and <Code>Array.unshift()</Code>.\r\n          </p>\r\n          <p>\r\n            Both methods take one or more elements as parameters and add those\r\n            elements to the array the method is being called on; the\r\n            <Code>push()</Code> method adds elements to the end of an array, and\r\n            <Code>unshift()</Code> adds elements to the beginning. Consider the\r\n            following:\r\n          </p>\r\n          <Comment>\r\n            <span class=\"blue\">let </span>\r\n            <span class=\"black\">twentyThree = </span>\r\n            <span class=\"green\">'XXIII'</span>\r\n            <span class=\"black\">;</span>\r\n            <div class=\"next\"></div>\r\n            <span class=\"blue\">let </span>\r\n            <span class=\"black\">romanNumerals = [ </span>\r\n            <span class=\"green\">'XXI', 'XXII'</span>\r\n            <span class=\"black\">];</span>\r\n            <div class=\"next\"></div>\r\n            <div class=\"next\"></div>\r\n            <span class=\"black\">romanNumerals.</span>\r\n            <span class=\"red\">unshift</span>\r\n            <span class=\"black\">( </span>\r\n            <span class=\"green\">'XIX', 'XX'</span>\r\n            <span class=\"black\">);</span>\r\n          </Comment>\r\n          <p>\r\n            <Code>romanNumerals</Code> would have the value\r\n            <Code>['XIX', 'XX', 'XXI', 'XXII']</Code>.\r\n          </p>\r\n          <Comment>\r\n            <span class=\"black\">romanNumerals.</span>\r\n            <span class=\"red\">push</span>\r\n            <span class=\"black\">(twentyThree);</span>\r\n          </Comment>\r\n          <p>\r\n            <Code>romanNumerals</Code> would have the value\r\n            <Code>['XIX', 'XX', 'XXI', 'XXII', 'XXIII']</Code>. Notice that we\r\n            can also pass variables, which allows us even greater flexibility in\r\n            dynamically modifying our array's data.\r\n          </p>\r\n          <hr />\r\n          <p>\r\n            We have defined a function, <Code>mixedNumbers</Code>, which we are\r\n            passing an array as an argument. Modify the function by using\r\n            <Code>push()</Code> and <Code>unshift()</Code> to add\r\n            <Code>'I', 2, 'three'</Code> to the beginning of the array and\r\n            <Code>7, 'VIII', 9</Code> to the end so that the returned array\r\n            contains representations of the numbers 1-9 in order.\r\n          </p>\r\n          <hr />\r\n          <tests />\r\n          <ul class=\"tests\">\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                <Code>mixedNumbers([\"IV\", 5, \"six\"])</Code> should now return\r\n                <Code>[\"I\", 2, \"three\", \"IV\", 5, \"six\", 7, \"VIII\", 9]</Code>\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                The <Code>mixedNumbers</Code> function should utilize the\r\n                <Code>push()</Code> method\r\n              </p>\r\n            </li>\r\n            <li class=\"test\">\r\n              <tests-initial />\r\n              <p>\r\n                The <Code>mixedNumbers</Code> function should utilize the\r\n                <Code>unshift()</Code> method\r\n              </p>\r\n            </li>\r\n          </ul>\r\n        </LeftScreen>\r\n      </div>\r\n      <RightScreen @resize-width=\"changeWidth\"> </RightScreen>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport Comment from \"@/components/util-components/comment.vue\";\r\nimport Navigation from \"@/components/util-components/navigation.vue\";\r\nimport LeftScreen from \"@/components/util-components/left-screen.vue\";\r\nimport Code from \"@/components/util-components/code.vue\";\r\nimport RightScreen from \"@/components/util-components/right-screen.vue\";\r\nimport Tests from \"@/components/util-components/tests.vue\";\r\nimport testsInitial from \"@/components/util-components/svg-components/tests-initial.vue\";\r\nimport { ref } from \"vue\";\r\nconst leftScreenRef = ref();\r\n\r\nfunction changeWidth(n) {\r\n  let size = window.innerWidth - n - 30;\r\n  leftScreenRef.value.style.width = size + \"px\";\r\n}\r\n</script>\r\n","import script from \"./add-items-to-an-array-with-push()-and-unshift().vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./add-items-to-an-array-with-push()-and-unshift().vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"sourceRoot":""}